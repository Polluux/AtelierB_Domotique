THEORY ProofList IS
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & _f(61) & getInvalideObjects.1,(_f(8) => _f(63));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & _f(61) & getActifObjects.1,(_f(8) => _f(62));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & activateAlarm.2,(_f(52) & _f(52) & _f(8) & _f(32) => _f(60));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & activateAlarm.1,(_f(52) & _f(52) & _f(8) & _f(17) => _f(59));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & deactivate.2,(_f(48) & _f(56) & _f(48) & _f(56) & _f(8) & _f(32) => _f(57));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & deactivate.1,(_f(48) & _f(56) & _f(48) & _f(56) & _f(8) & _f(17) => _f(31));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & activate.2,(_f(48) & _f(49) & _f(50) & _f(51) & _f(52) & _f(48) & _f(49) & _f(50) & _f(51) & _f(52) & _f(8) & _f(32) => _f(54));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & activate.1,(_f(48) & _f(49) & _f(50) & _f(51) & _f(52) & _f(48) & _f(49) & _f(50) & _f(51) & _f(52) & _f(8) & _f(17) => _f(53));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetMobile.9,(_f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(8) & _f(37) => _f(46));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetMobile.8,(_f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(8) & _f(21) => _f(45));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetMobile.7,(_f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(8) & _f(35) => _f(44));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetMobile.6,(_f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(8) & _f(19) => _f(43));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetMobile.5,(_f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(8) & _f(32) => _f(33));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetMobile.4,(_f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(8) & _f(17) => _f(31));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetMobile.3,(_f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(8) & _f(15) => _f(30));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetMobile.2,(_f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(8) & _f(11) => _f(29));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetMobile.1,(_f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(26) & _f(27) & _f(40) & _f(41) & _f(42) & _f(8) & _f(9) => _f(28));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetImmobile.8,(_f(26) & _f(27) & _f(26) & _f(27) & _f(8) & _f(37) => _f(38));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetImmobile.7,(_f(26) & _f(27) & _f(26) & _f(27) & _f(8) & _f(35) => _f(36));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetImmobile.6,(_f(26) & _f(27) & _f(26) & _f(27) & _f(8) & _f(19) => _f(34));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetImmobile.5,(_f(26) & _f(27) & _f(26) & _f(27) & _f(8) & _f(32) => _f(33));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetImmobile.4,(_f(26) & _f(27) & _f(26) & _f(27) & _f(8) & _f(17) => _f(31));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetImmobile.3,(_f(26) & _f(27) & _f(26) & _f(27) & _f(8) & _f(15) => _f(30));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetImmobile.2,(_f(26) & _f(27) & _f(26) & _f(27) & _f(8) & _f(11) => _f(29));
_f(1) & _f(6) & _f(7) & _f(23) & _f(24) & addObjetImmobile.1,(_f(26) & _f(27) & _f(26) & _f(27) & _f(8) & _f(9) => _f(28));
_f(1) & _f(6) & _f(7) & Initialisation.7,(_f(8) & _f(21) => _f(22));
_f(1) & _f(6) & _f(7) & Initialisation.6,(_f(8) & _f(19) => _f(20));
_f(1) & _f(6) & _f(7) & Initialisation.5,(_f(8) & _f(17) => _f(18));
_f(1) & _f(6) & _f(7) & Initialisation.4,(_f(8) & _f(15) => _f(16));
_f(1) & _f(6) & _f(7) & Initialisation.3,(_f(8) & _f(13) => _f(14));
_f(1) & _f(6) & _f(7) & Initialisation.2,(_f(8) & _f(11) => _f(12));
_f(1) & _f(6) & _f(7) & Initialisation.1,(_f(8) & _f(9) => _f(10));
_f(1) & ValuesLemmas.3,(_f(2) => _f(5));
_f(1) & ValuesLemmas.2,(_f(2) => _f(4));
_f(1) & ValuesLemmas.1,(_f(2) => _f(3))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
"Valuation is correct";
((0) .. (256)): FIN(INTEGER) & not(((0) .. (256)) = {});
((1..3)*{ETATS}): FIN(NATURAL*{ETATS}) & not(((1..3)*{ETATS}) = {});
((1..2)*{TYPES}): FIN(NATURAL*{TYPES}) & not(((1..2)*{TYPES}) = {});
OBJETS: FIN(INTEGER) & not(OBJETS = {}) & ((1..3)*{ETATS}): FIN(NATURAL*{ETATS}) & not(((1..3)*{ETATS}) = {}) & ((1..2)*{TYPES}): FIN(NATURAL*{TYPES}) & not(((1..2)*{TYPES}) = {});
((1..2)*{OKKO}): FIN(NATURAL*{OKKO}) & not(((1..2)*{OKKO}) = {}) & ((OBJETS) = (((0) .. (256))));
"Refinement is correct";
"Check invariant ((c_obj$1) : (((((0) .. (256))) --> (OKKO))))";
(((OBJETS * {(2|->OKKO)})) : (((((0) .. (256))) --> (((1..2)*{OKKO})))));
"Check invariant ((obj) = (((c_obj$1)~ )[{ok}]))";
(({}) = ((((OBJETS * {(2|->OKKO)}))~ )[{(1|->OKKO)}]));
"Check invariant ((c_incompatibilites$1) : (((((0) .. (256))) <-> (((0) .. (256))))))";
(({}) : (((((0) .. (256))) <-> (((0) .. (256))))));
"Check invariant ((incompatibilites) = (((obj) <| (c_incompatibilites$1))))";
(({}) = ((({}) <| ({}))));
"Check invariant ((c_etat$1) : (((((0) .. (256))) --> (ETATS))))";
(({}) : (((((0) .. (256))) --> (((1..3)*{ETATS})))));
"Check invariant ((c_type$1) : (((((0) .. (256))) --> (TYPES))))";
(({}) : (((((0) .. (256))) --> (((1..2)*{TYPES})))));
"Check invariant ((c_pos$1) : (((((0) .. (256))) >-> (((NAT) <-> (NAT))))))";
(({}) : (((((0) .. (256))) >-> (((NAT) <-> (NAT))))));
obj : POW( OBJETS) & ((incompatibilites) : (((obj) <-> (obj)))) & etat : obj +-> ((1..3)*{ETATS}) & dom(etat) = obj & ((etat) : (((obj) --> (((1..3)*{ETATS}))))) & ((((((etat)~ )[{(1|->ETATS)}]) /\ ((incompatibilites )[((etat)~ )[{(1|->ETATS)}]]))) = ({})) & !(nn).(((((nn) : (obj))) => (not(nn : (incompatibilites )[{nn}])))) & type : obj +-> ((1..2)*{TYPES}) & dom(type) = obj & ((type) : (((obj) --> (((1..2)*{TYPES}))))) & pos : ((type)~ )[{(1|->TYPES)}] +-> ((NAT) <-> (NAT)) & pos : ((type)~ )[{(1|->TYPES)}] --> ((NAT) <-> (NAT)) & pos~ : ((NAT) <-> (NAT)) +-> ((type)~ )[{(1|->TYPES)}] & ((pos) : (((((type)~ )[{(1|->TYPES)}]) >-> (((NAT) <-> (NAT)))))) & ((alarme) : (BOOL)) & ((((alarme) = (TRUE))) => (((((((type)~ )[{(1|->TYPES)}]) /\ (((etat)~ )[{(1|->ETATS)}]))) = ({}))));
c_obj$1 : ((0) .. (256)) +-> ((1..2)*{OKKO}) & dom(c_obj$1) = ((0) .. (256)) & ((c_obj$1) : (((((0) .. (256))) --> (((1..2)*{OKKO}))))) & ((obj) = (((c_obj$1)~ )[{(1|->OKKO)}])) & ((c_incompatibilites$1) : (((((0) .. (256))) <-> (((0) .. (256)))))) & ((incompatibilites) = (((obj) <| (c_incompatibilites$1)))) & c_etat$1 : ((0) .. (256)) +-> ((1..3)*{ETATS}) & dom(c_etat$1) = ((0) .. (256)) & ((c_etat$1) : (((((0) .. (256))) --> (((1..3)*{ETATS}))))) & ((etat) = (((obj) <| (c_etat$1)))) & c_type$1 : ((0) .. (256)) +-> ((1..2)*{TYPES}) & dom(c_type$1) = ((0) .. (256)) & ((c_type$1) : (((((0) .. (256))) --> (((1..2)*{TYPES}))))) & ((type) = (((obj) <| (c_type$1)))) & c_pos$1 : ((0) .. (256)) +-> ((NAT) <-> (NAT)) & c_pos$1 : ((0) .. (256)) --> ((NAT) <-> (NAT)) & c_pos$1~ : ((NAT) <-> (NAT)) +-> ((0) .. (256)) & ((c_pos$1) : (((((0) .. (256))) >-> (((NAT) <-> (NAT)))))) & ((pos) = (((obj) <| (c_pos$1)))) & ((c_alarme$1) : (BOOL)) & ((alarme) = (c_alarme$1));
((oo) : (OBJETS)) & not(oo : obj) & ((oo) : (OBJETS)) & not(oo : obj);
((oo) : (OBJETS));
not(oo : obj);
((((c_obj$1) <+ ({((oo) |-> ((1|->OKKO)))}))) : (((((0) .. (256))) --> (((1..2)*{OKKO})))));
((((obj) \/ ({oo}))) = (((((c_obj$1) <+ ({((oo) |-> ((1|->OKKO)))})))~ )[{(1|->OKKO)}]));
((incompatibilites) = (((((obj) \/ ({oo}))) <| (c_incompatibilites$1))));
((((c_etat$1) <+ ({((oo) |-> ((2|->ETATS)))}))) : (((((0) .. (256))) --> (((1..3)*{ETATS})))));
"Check invariant ((etat) = (((obj) <| (c_etat$1))))";
((((etat) \/ ({((oo) |-> ((2|->ETATS)))}))) = (((((obj) \/ ({oo}))) <| (((c_etat$1) <+ ({((oo) |-> ((2|->ETATS)))}))))));
((((c_type$1) <+ ({((oo) |-> ((2|->TYPES)))}))) : (((((0) .. (256))) --> (((1..2)*{TYPES})))));
"Check invariant ((type) = (((obj) <| (c_type$1))))";
((((type) \/ ({((oo) |-> ((2|->TYPES)))}))) = (((((obj) \/ ({oo}))) <| (((c_type$1) <+ ({((oo) |-> ((2|->TYPES)))}))))));
"Check invariant ((pos) = (((obj) <| (c_pos$1))))";
((pos) = (((((obj) \/ ({oo}))) <| (c_pos$1))));
((oo) : (OBJETS)) & not(oo : obj) & ((xx) : (NAT)) & ((yy) : (NAT)) & ((((pos)~ )[{{((xx) |-> (yy))}}]) = ({})) & ((oo) : (OBJETS)) & not(oo : obj) & ((xx) : (NAT)) & ((yy) : (NAT)) & ((((pos)~ )[{{((xx) |-> (yy))}}]) = ({}));
((xx) : (NAT));
((yy) : (NAT));
((((pos)~ )[{{((xx) |-> (yy))}}]) = ({}));
((((c_type$1) <+ ({((oo) |-> ((1|->TYPES)))}))) : (((((0) .. (256))) --> (((1..2)*{TYPES})))));
((((type) \/ ({((oo) |-> ((1|->TYPES)))}))) = (((((obj) \/ ({oo}))) <| (((c_type$1) <+ ({((oo) |-> ((1|->TYPES)))}))))));
((((c_pos$1) <+ ({((oo) |-> ({((xx) |-> (yy))}))}))) : (((((0) .. (256))) >-> (((NAT) <-> (NAT))))));
((((pos) \/ ({((oo) |-> ({((xx) |-> (yy))}))}))) = (((((obj) \/ ({oo}))) <| (((c_pos$1) <+ ({((oo) |-> ({((xx) |-> (yy))}))}))))));
((oo) : (obj)) & not((etat )(oo) = (1|->ETATS)) & (((((incompatibilites )[{oo}]) /\ (((etat)~ )[{(1|->ETATS)}]))) = ({})) & ((((((incompatibilites)~ )[{oo}]) /\ (((etat)~ )[{(1|->ETATS)}]))) = ({})) & ((alarme) = (FALSE)) & ((oo) : (obj)) & not((etat )(oo) = (1|->ETATS)) & (((((incompatibilites )[{oo}]) /\ (((etat)~ )[{(1|->ETATS)}]))) = ({})) & ((((((incompatibilites)~ )[{oo}]) /\ (((etat)~ )[{(1|->ETATS)}]))) = ({})) & ((alarme) = (FALSE));
((oo) : (obj));
not((etat )(oo) = (1|->ETATS));
(((((incompatibilites )[{oo}]) /\ (((etat)~ )[{(1|->ETATS)}]))) = ({}));
((((((incompatibilites)~ )[{oo}]) /\ (((etat)~ )[{(1|->ETATS)}]))) = ({}));
((alarme) = (FALSE));
((((c_etat$1) <+ ({((oo) |-> ((1|->ETATS)))}))) : (((((0) .. (256))) --> (((1..3)*{ETATS})))));
((((etat) <+ ({((oo) |-> ((1|->ETATS)))}))) = (((obj) <| (((c_etat$1) <+ ({((oo) |-> ((1|->ETATS)))}))))));
((oo) : (obj)) & (((etat )(oo)) = ((1|->ETATS))) & ((oo) : (obj)) & (((etat )(oo)) = ((1|->ETATS)));
(((etat )(oo)) = ((1|->ETATS)));
((((etat) <+ ({((oo) |-> ((2|->ETATS)))}))) = (((obj) <| (((c_etat$1) <+ ({((oo) |-> ((2|->ETATS)))}))))));
((alarme) = (FALSE)) & ((alarme) = (FALSE));
((((((((((c_etat$1) |> ({(3|->ETATS)}))) \/ (c_etat$1))) |> ({(2|->ETATS)}))) \/ ((((c_etat$1)~ )[{(1|->ETATS)}] * {(2|->ETATS)})))) : (((((0) .. (256))) --> (((1..3)*{ETATS})))));
((((((((((etat) |> ({(3|->ETATS)}))) \/ (etat))) |> ({(2|->ETATS)}))) \/ ((((etat)~ )[{(1|->ETATS)}] * {(2|->ETATS)})))) = (((obj) <| (((((((((c_etat$1) |> ({(3|->ETATS)}))) \/ (c_etat$1))) |> ({(2|->ETATS)}))) \/ ((((c_etat$1)~ )[{(1|->ETATS)}] * {(2|->ETATS)})))))));
((rr$1) = (rr));
((((((((c_obj$1)~ )[{(1|->OKKO)}]) <| (c_etat$1)))~ )[{(1|->ETATS)}]) = (((etat)~ )[{(1|->ETATS)}]));
((((((((c_obj$1)~ )[{(1|->OKKO)}]) <| (c_etat$1)))~ )[{(3|->ETATS)}]) = (((etat)~ )[{(3|->ETATS)}]));
((1..2)*{OKKO}): FIN(NATURAL*{OKKO}) & not(((1..2)*{OKKO}) = {});
((c_alarme$1) : (BOOL));
((pos) = (((obj) <| (c_pos$1))));
c_pos$1 : ((0) .. (256)) +-> ((NAT) <-> (NAT));
c_pos$1 : ((0) .. (256)) --> ((NAT) <-> (NAT));
c_pos$1~ : ((NAT) <-> (NAT)) +-> ((0) .. (256));
((c_pos$1) : (((((0) .. (256))) >-> (((NAT) <-> (NAT))))));
((type) = (((obj) <| (c_type$1))));
c_type$1 : ((0) .. (256)) +-> ((1..2)*{TYPES});
dom(c_type$1) = ((0) .. (256));
((c_type$1) : (((((0) .. (256))) --> (((1..2)*{TYPES})))));
((etat) = (((obj) <| (c_etat$1))));
c_etat$1 : ((0) .. (256)) +-> ((1..3)*{ETATS});
dom(c_etat$1) = ((0) .. (256));
((c_etat$1) : (((((0) .. (256))) --> (((1..3)*{ETATS})))));
((incompatibilites) = (((obj) <| (c_incompatibilites$1))));
((c_incompatibilites$1) : (((((0) .. (256))) <-> (((0) .. (256))))));
((obj) = (((c_obj$1)~ )[{(1|->OKKO)}]));
c_obj$1 : ((0) .. (256)) +-> ((1..2)*{OKKO});
dom(c_obj$1) = ((0) .. (256));
((c_obj$1) : (((((0) .. (256))) --> (((1..2)*{OKKO})))))
END
&
THEORY EnumerateX IS
ETATS == {actif,inactif,invalide};
OKKO == {ok,ko};
TYPES == {mobile,immobile}
END
